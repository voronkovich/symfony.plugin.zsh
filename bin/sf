#!/usr/bin/env zsh

declare -r app_name="${0##*/}"

main() (
    declare -r app_runner="$(detect_runner)"

    local cmd="${1}" && shift 2>/dev/null

    case "${cmd}" in
        new)
            exec app_new "$@"
            ;;
        serve)
            exec app_serve "$@"
            ;;
        run)
            run "$@"
            ;;
        php)
            run_php "$@"
            ;;
        composer)
            run_composer "$@"
            ;;
        phpunit)
            run_phpunit "$@"
            ;;
        phive)
            run_phive "$@"
            ;;
        psql)
            if is_ddev; then
                exec ddev psql "${@}"
            fi

            not_supported_by_runner

            symfony_cli_required

            exec symfony run psql "$@"
            ;;
        open)
            if is_ddev; then
                exec ddev launch "$@" 2>/dev/null
            fi

            not_supported_by_runner

            if symfony_cli_installed; then
                exec symfony open:local "$@"
            fi

            exec open http://127.0.0.1:8000 2>/dev/null
            ;;
        mails)
            if is_ddev; then
                exec ddev launch -m "$@" 2>/dev/null
            fi

            not_supported_by_runner

            symfony_cli_required

            exec symfony open:local:webmail "$@"
            ;;
        status)
            if is_ddev; then
                exec ddev status "$@"
            fi

            not_supported_by_runner

            symfony_cli_required

            exec symfony server:status "$@"
            ;;
    esac

    run_console "${cmd}" "$@"
)

app_new() (
    if symfony_cli_installed; then
        exec symfony new "$@"
    fi

    local help version webapp docker

    zmodload zsh/zutil
    zparseopts -D -F -K -- \
        {h,-help}=help \
        -no-ansi=noansi \
        -webapp=webapp \
        -docker=docker \
        -version:=version \
        || return 1

    if [[ -n "${help}" ]]; then
        cat <<HELP
Create a new Symfony project

Usage:

  ${app_name} [options] [--] [<directory>]

Arguments:
  directory  Directory of the project to create

Options:
  --version=value  The version of the Symfony skeleton
  --webapp         Add the webapp pack to get a fully configured web project
  --docker         Enable Docker support (SYMFONY_DOCKER=1)
  -h, --help       Show this help
HELP
        return 0
    fi

    if [[ -z ${1} ]]; then
        echo 'A directory must be passed as an argument or via the --dir option' >&2
        return 1
    fi

    if [[ -n "${docker}" ]]; then
        export SYMFONY_DOCKER=1
    fi

    composer create-project "symfony/skeleton${version[1]:+:}${version[2]/=}" "${1}" \
        && [[ -n "${webapp}" ]] && composer --working-dir="${1:-skeleton}" require webapp
)

app_serve() (
    if is_ddev; then
        exec ddev start
    fi

    not_supported_by_runner

    if symfony_cli_installed; then
        exec symfony serve "$@"
    fi

    local help port=('--port' '8000') root=('--document-root' 'public')

    zmodload zsh/zutil
    zparseopts -D -F -K -- \
        {h,-help}=help \
        -no-ansi=noansi \
        -port:=port \
        -document-root:=root \
        || return 1

    if [[ -n "${help}" ]]; then
        cat <<HELP
Run a local web server

Usage:

  ${app_name} [options]

Options:

  --port=value           Preferred HTTP port [default: ${port[2]}]
  --document-root=value  Project document root [default: ${root[2]}]
  -h, --help             Show this help
HELP
        return 0
    fi

    exec php -S "127.0.0.1:${port[2]/=}" -t "${root[2]/=}"
)

run() {
    if [[ -n "${app_runner}" ]]; then
       exec "${(@s: :)app_runner}" "$@"
    fi

    if symfony_cli_installed; then
        exec symfony run "$@"
    fi

    exec "$@"
}

run_php() {
    if [[ -n "${app_runner}" ]]; then
       exec "${(@s: :)app_runner}" php "$@"
    fi

    if symfony_cli_installed; then
        exec symfony php "$@"
    fi

    exec php "$@"
}

run_composer() {
    if [[ -n "${app_runner}" ]]; then
       exec "${(@s: :)app_runner}" composer "$@"
    fi

    if symfony_cli_installed; then
        exec symfony composer "$@"
    fi

    exec composer "$@"
}

run_phpunit() {
    if [[ ! -f bin/phpunit ]]; then
        echo 'PHPUnit not found: bin/phpunit' >&2
        echo '\nInstallation:\n'
        echo "  ${app_name} composer require --dev phpunit"
        exit 1
    fi

    run_php bin/phpunit "$@"
}

run_console() {
    if [[ ! -f bin/console ]]; then
        echo 'Symfony console not found: bin/console' >&2
        exit 1
    fi

    if [[ -n "${app_runner}" ]]; then
       exec "${(@s: :)app_runner}" php bin/console "$@"
    fi

    if symfony_cli_installed; then
        exec symfony console "$@"
    fi

    exec php bin/console "$@"
}

run_phive() {
    if is_ddev; then
        exec ddev exec -- phive "$@"
    fi

    local phive="$(find_phive)"

    if [[ -z "${phive}" ]]; then
        echo 'PHIVE required: https://phar.io/#Install' >&2
        if command -v brew > /dev/null; then
            echo '\nHomebrew:\n'
            echo '  brew install phive'
        fi
        exit 1
    fi

    run_php "${phive}" "$@"
}

find_phive() {
    local phive="./phive.phar"
    if [[ -f "${phive}" ]]; then
        echo "${phive}" && return
    fi

    phive="./bin/phive"
    if [[ -f "${phive}" ]]; then
        echo "${phive}" && return
    fi

    if [[ -n "${app_runner}" ]]; then
        return 1
    fi

    phive="$(which phive 2>/dev/null)"
    if [[ $? -eq 0 && -f "${phive}" ]]; then
        echo "${phive}" && return
    fi

    return 1
}

symfony_cli_required() {
    symfony_cli_installed && return

    echo 'Symfony CLI required: https://symfony.com/download' >&2

    if command -v brew > /dev/null; then
        echo '\nHomebrew:\n'
        echo '  brew install symfony-cli/tap/symfony-cli'
    fi

    if command -v apt > /dev/null; then
        echo '\nAPT:\n'
        echo "  curl -1sLf 'https://dl.cloudsmith.io/public/symfony/stable/setup.deb.sh' | sudo -E bash"
        echo '  sudo apt install symfony-cli'
    fi

    exit 1
}

symfony_cli_installed() {
    command -v symfony >/dev/null
}

is_ddev() {
    [[ "${app_runner}" == ddev* ]]
}

detect_runner() {
    if [[ -f "${PWD}/.env.local" ]]; then
        local runner="$(sed -nEe 's/^SF_RUNNER=(.*)$/\1/p' <"${PWD}/.env.local" | unquote)"

        echo ${runner} && return
    fi

    if [[ "${SF_DDEV}" == '1' && -d "${PWD}/.ddev" ]]; then
        echo 'ddev exec --' && return
    fi

    echo "${SF_RUNNER}"
}

unquote() {
    command sed -Ee "s/^\"|'//" -e "s/\"|'$//"
}

not_supported_by_runner() {
    if [[ -n "${app_runner}" ]]; then
        echo "Not supported by current runner: ${app_runner}" >&2
        exit 1
    fi
}

main "$@"
