#!/usr/bin/env zsh

declare -r app_name="${0##*/}"

main() (
    declare -r app_runner="$(runner_detect)"

    local cmd="${1}" && shift 2>/dev/null

    case "${cmd}" in
        new)
            app_new "$@"
            exit $?
            ;;
        serve)
            app_serve "$@"
            exit $?
            ;;
        run)
            run "$@"
            exit $?
            ;;
        php)
            php_run "$@"
            exit $?
            ;;
        composer)
            composer_run "$@"
            exit $?
            ;;
        phpunit)
            phpunit_run "$@"
            exit $?
            ;;
        phive)
            phive_run "$@"
            exit $?
            ;;
        psql)
            psql_run "$@"
            exit $?
            ;;
        open)
            open_browser "$@"
            exit $?
            ;;
        mails)
            open_mails "$@"
            exit $?
            ;;
        status)
            show_status "$@"
            exit $?
            ;;
    esac

    console_run "${cmd}" "$@"
)

app_new() {
    if runner_is 'symfony'; then
        symfony new "$@"
        return $?
    fi

    local help version webapp docker

    zmodload zsh/zutil
    zparseopts -D -F -K -- \
        {h,-help}=help \
        -no-ansi=noansi \
        -webapp=webapp \
        -docker=docker \
        -version:=version \
        || return 1

    if [[ -n "${help}" ]]; then
        cat <<HELP
Create a new Symfony project

Usage:

  ${app_name} [options] [--] [<directory>]

Arguments:
  directory  Directory of the project to create

Options:
  --version=value  The version of the Symfony skeleton
  --webapp         Add the webapp pack to get a fully configured web project
  --docker         Enable Docker support (SYMFONY_DOCKER=1)
  -h, --help       Show this help
HELP
        return 0
    fi

    if [[ -z ${1} ]]; then
        echo 'A directory must be passed as an argument or via the --dir option' >&2
        return 1
    fi

    if [[ -n "${docker}" ]]; then
        export SYMFONY_DOCKER=1
    fi

    composer create-project "symfony/skeleton${version[1]:+:}${version[2]/=}" "${1}" \
        && [[ -n "${webapp}" ]] && composer --working-dir="${1:-skeleton}" require webapp
}

app_serve() {
    if runner_is 'ddev'; then
        exec ddev start "$@"
    fi

    if runner_is 'symfony'; then
        exec symfony serve "$@"
    fi

    local help port=('--port' '8000') root=('--document-root' 'public')

    zmodload zsh/zutil
    zparseopts -D -F -K -- \
        {h,-help}=help \
        -no-ansi=noansi \
        -port:=port \
        -document-root:=root \
        || return 1

    if [[ -n "${help}" ]]; then
        cat <<HELP
Run a local web server

Usage:

  ${app_name} [options]

Options:

  --port=value           Preferred HTTP port [default: ${port[2]}]
  --document-root=value  Project document root [default: ${root[2]}]
  -h, --help             Show this help
HELP
        return 0
    fi

    exec php -S "127.0.0.1:${port[2]/=}" -t "${root[2]/=}"
}

run() {
    if runner_is 'symfony'; then
        symfony run "$@"
        return $?
    fi

    runner_run "$@"
}

php_run() {
    if runner_is 'ddev'; then
        ddev php "$@"
        return $?
    fi

    runner_run php "$@"
}

composer_run() {
    if runner_is 'symfony'; then
        symfony composer "$@"
        return $?
    fi

    if runner_is 'ddev'; then
        ddev composer "$@"
        return $?
    fi

    runner_run composer "$@"
}

phpunit_run() {
    if [[ ! -f bin/phpunit ]]; then
        echo 'PHPUnit not found: bin/phpunit' >&2
        echo '\nInstallation:\n'
        echo "  ${app_name} composer require --dev phpunit/phpunit"
        return 1
    fi

    php_run bin/phpunit "$@"
}

console_run() {
    declare -r console="${SF_CONSOLE:-bin/console}"

    if [[ ! -f "${console}" ]]; then
        echo "Console not found: ${console}" >&2
        return 1
    fi

    if runner_is 'symfony' && [[ -z "${SF_CONSOLE}" ]]; then
        symfony console "$@"
        return $?
    fi

    runner_run php "${console}" "$@"
}

phive_run() {
    if runner_is 'ddev'; then
       ddev exec -- phive "$@"
       return $?
    fi

    local phive="$(phive_find)"

    if [[ -z "${phive}" ]]; then
        echo 'PHIVE required: https://phar.io/#Install' >&2
        if (( $+commands[brew] )); then
            echo '\nHomebrew:\n'
            echo '  brew install phive'
        fi
        return 1
    fi

    php_run "${phive}" "$@"
}

phive_find() {
    local phive="./phive.phar"
    if [[ -f "${phive}" ]]; then
        echo "${phive}" && return
    fi

    phive="./bin/phive"
    if [[ -f "${phive}" ]]; then
        echo "${phive}" && return
    fi

    if [[ -n "${app_runner}" ]]; then
        return 1
    fi

    phive="$(which phive 2>/dev/null)"
    if [[ $? -eq 0 && -f "${phive}" ]]; then
        echo "${phive}" && return
    fi

    return 1
}

psql_run() {
    if runner_is 'ddev'; then
        ddev psql "$@"
        return $?
    fi

    if runner_is 'symfony'; then
        symfony run psql "$@"
        return $?
    fi

    runner_not_supported
}

open_browser() {
    if runner_is 'ddev'; then
        ddev launch "$@" 2>/dev/null
        return $?
    fi

    if runner_is 'symfony'; then
        symfony open:local "$@"
        return $?
    fi

    open 'http://127.0.0.1:8000' 2>/dev/null
}

open_mails() {
    if runner_is 'ddev'; then
        ddev launch -m "$@" 2>/dev/null
        return $?
    fi

    if runner_is 'symfony'; then
        symfony open:local:webmail "$@"
        return $?
    fi

    runner_not_supported
}

show_status() {
    echo "Runner: ${app_runner}\n"

    if runner_is 'local'; then
        echo "PHP binary: $(which php)\n"
    fi

    php_run --version && echo

    if runner_is 'ddev'; then
        ddev status "$@"
        return $?
    fi

    if runner_is 'symfony'; then
        echo "Symfony binary: $(which symfony)\n"
        symfony server:status "$@"
        return $?
    fi
}

symfony_cli_enabled() {
    feature_enabled "${SF_SYMFONY_CLI:-on}"
}

ddev_enabled() {
    feature_enabled "${SF_DDEV:-on}"
}

runner_run() {
    runner_is 'local' && "$@" || "${(@s: :)app_runner}" "$@"
}

runner_detect() {
    local runner="${SF_RUNNER}"

    if [[ -n "${runner}" ]]; then
        echo "${runner}"
        return
    fi

    if [[ -f "${PWD}/.env.local" ]]; then
        runner="$(sed -nEe 's/^SF_RUNNER=(.*)$/\1/p' <"${PWD}/.env.local" | unquote)"

        if [[ -n "${runner}" ]]; then
            echo "${runner}"
            return
        fi
    fi

    if ddev_enabled && [[ -d "${PWD}/.ddev" ]]; then
        echo 'ddev exec --'
        return
    fi

    if symfony_cli_enabled && (( $+commands[symfony] )) then
        echo 'symfony'
        return
    fi

    echo 'local'
}

runner_is() {
    [[ "$1" == "$(runner_name)" ]]
}

runner_name() {
    echo "${app_runner%% *}"
}

runner_not_supported() {
    if [[ -n "${app_runner}" ]]; then
        echo "Not supported by current runner: ${app_runner}" >&2
        exit 1
    fi
}

feature_enabled() {
    [[ ! "${1}" =~ '^(0|no|off|false|disabled?)$' ]]
}

unquote() {
    sed -Ee "s/^\"|'//" -e "s/\"|'$//"
}

main "$@"
