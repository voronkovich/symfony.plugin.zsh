#!/usr/bin/env zsh

declare -r app_name="${0##*/}"

main() (
    declare -r app_runner="$(runner_detect)"

    local cmd="${1}" && shift 2>/dev/null

    case "${cmd}" in
        new)
            exec app_new "$@"
            ;;
        serve)
            exec app_serve "$@"
            ;;
        run)
            run "$@"
            ;;
        php)
            php_run "$@"
            ;;
        composer)
            composer_run "$@"
            ;;
        phpunit)
            phpunit_run "$@"
            ;;
        phive)
            phive_run "$@"
            ;;
        psql)
            ddev_try psql "$@"

            runner_not_supported

            symfony_cli_required

            exec symfony run psql "$@"
            ;;
        open)
            ddev_try launch "$@" 2>/dev/null

            runner_not_supported

            symfony_cli_try open:local "$@"

            exec open 'http://127.0.0.1:8000' 2>/dev/null
            ;;
        mails)
            ddev_try launch -m "$@" 2>/dev/null

            runner_not_supported

            symfony_cli_required

            exec symfony open:local:webmail "$@"
            ;;
        status)
            show_status "$@"
            ;;
    esac

    console_run "${cmd}" "$@"
)

app_new() (
    symfony_cli_try new "$@"

    local help version webapp docker

    zmodload zsh/zutil
    zparseopts -D -F -K -- \
        {h,-help}=help \
        -no-ansi=noansi \
        -webapp=webapp \
        -docker=docker \
        -version:=version \
        || return 1

    if [[ -n "${help}" ]]; then
        cat <<HELP
Create a new Symfony project

Usage:

  ${app_name} [options] [--] [<directory>]

Arguments:
  directory  Directory of the project to create

Options:
  --version=value  The version of the Symfony skeleton
  --webapp         Add the webapp pack to get a fully configured web project
  --docker         Enable Docker support (SYMFONY_DOCKER=1)
  -h, --help       Show this help
HELP
        return 0
    fi

    if [[ -z ${1} ]]; then
        echo 'A directory must be passed as an argument or via the --dir option' >&2
        return 1
    fi

    if [[ -n "${docker}" ]]; then
        export SYMFONY_DOCKER=1
    fi

    composer create-project "symfony/skeleton${version[1]:+:}${version[2]/=}" "${1}" \
        && [[ -n "${webapp}" ]] && composer --working-dir="${1:-skeleton}" require webapp
)

app_serve() (
    ddev_try start

    runner_not_supported

    symfony_cli_try serve "$@"

    local help port=('--port' '8000') root=('--document-root' 'public')

    zmodload zsh/zutil
    zparseopts -D -F -K -- \
        {h,-help}=help \
        -no-ansi=noansi \
        -port:=port \
        -document-root:=root \
        || return 1

    if [[ -n "${help}" ]]; then
        cat <<HELP
Run a local web server

Usage:

  ${app_name} [options]

Options:

  --port=value           Preferred HTTP port [default: ${port[2]}]
  --document-root=value  Project document root [default: ${root[2]}]
  -h, --help             Show this help
HELP
        return 0
    fi

    exec php -S "127.0.0.1:${port[2]/=}" -t "${root[2]/=}"
)

run() {
    runner_try "$@"

    symfony_cli_try run "$@"

    exec "$@"
}

php_run() {
    runner_try php "$@"

    symfony_cli_try php "$@"

    exec php "$@"
}

composer_run() {
    runner_try composer "$@"

    symfony_cli_try composer "$@"

    exec composer "$@"
}

phpunit_run() {
    if [[ ! -f bin/phpunit ]]; then
        echo 'PHPUnit not found: bin/phpunit' >&2
        echo '\nInstallation:\n'
        echo "  ${app_name} composer require --dev phpunit"
        exit 1
    fi

    php_run bin/phpunit "$@"
}

console_run() {
    declare -r console="${SF_CONSOLE:-bin/console}"

    if [[ ! -f ${console} ]]; then
        echo "Console not found: ${console}" >&2
        exit 1
    fi

    runner_try php "${console}" "$@"

    if [[ -z "${SF_CONSOLE}" ]]; then
        symfony_cli_try console "$@"
    else
        symfony_cli_try php "${console}" "$@"
    fi

    exec php "${console}" "$@"
}

phive_run() {
    ddev_try exec -- phive "$@"

    local phive="$(phive_find)"

    if [[ -z "${phive}" ]]; then
        echo 'PHIVE required: https://phar.io/#Install' >&2
        if (( $+commands[brew] )); then
            echo '\nHomebrew:\n'
            echo '  brew install phive'
        fi
        exit 1
    fi

    php_run "${phive}" "$@"
}

phive_find() {
    local phive="./phive.phar"
    if [[ -f "${phive}" ]]; then
        echo "${phive}" && return
    fi

    phive="./bin/phive"
    if [[ -f "${phive}" ]]; then
        echo "${phive}" && return
    fi

    if [[ -n "${app_runner}" ]]; then
        return 1
    fi

    phive="$(which phive 2>/dev/null)"
    if [[ $? -eq 0 && -f "${phive}" ]]; then
        echo "${phive}" && return
    fi

    return 1
}

show_status() {
    ddev_try status "$@"

    if [[ -n "${app_runner}" ]]; then
        echo "Runner: ${app_runner}\n"
        exec runner_run php -v
    fi

    if (( $+commands[symfony] )); then
        echo "Symfony binary: $(which symfony)\n"
        symfony php -v
        echo
        symfony server:status "$@"
        exit
    fi

    echo "PHP binary: $(which php)\n"
    exec php -v
}

symfony_cli_try() {
    symfony_cli_enabled && (( $+commands[symfony] )) && exec symfony "$@"
}

symfony_cli_enabled() {
    feature_enabled "${SF_SYMFONY_CLI:-on}"
}

symfony_cli_required() {
    (( $+commands[symfony] )) || return

    symfony_cli_instructions

    exit 1
}

symfony_cli_instructions() {
    echo 'Symfony CLI required: https://symfony.com/download' >&2

    if (( $+commands[brew] )); then
        echo '\nHomebrew:\n'
        echo '  brew install symfony-cli/tap/symfony-cli'
    fi

    if (( $+commands[apt] )); then
        echo '\nAPT:\n'
        echo "  curl -1sLf 'https://dl.cloudsmith.io/public/symfony/stable/setup.deb.sh' | sudo -E bash"
        echo '  sudo apt install symfony-cli'
    fi
}

ddev_try() {
    ddev_enabled && ddev_is_runner && exec ddev "$@"
}

ddev_is_runner() {
    [[ "${app_runner}" == ddev* ]]
}

ddev_enabled() {
    feature_enabled "${SF_DDEV:-on}"
}

ddev_autodetect_enabled() {
    feature_enabled "${SF_DDEV_AUTODETECT:-on}"
}

runner_try() {
    [[ -n "${app_runner}" ]] && exec runner_run "$@"
}

runner_run() {
    "${(@s: :)app_runner}" "$@"
}

runner_detect() {
    if [[ -f "${PWD}/.env.local" ]]; then
        local runner="$(sed -nEe 's/^SF_RUNNER=(.*)$/\1/p' <"${PWD}/.env.local" | unquote)"

        echo ${runner} && return
    fi

    if ddev_enabled && ddev_autodetect_enabled; then
        [[ -d "${PWD}/.ddev" ]] && echo 'ddev exec --' && return
    fi

    echo "${SF_RUNNER}"
}

runner_not_supported() {
    if [[ -n "${app_runner}" ]]; then
        echo "Not supported by current runner: ${app_runner}" >&2
        exit 1
    fi
}

feature_enabled() {
    [[ ! "${1}" =~ '^(0|no|off|false|disabled?)$' ]]
}

unquote() {
    command sed -Ee "s/^\"|'//" -e "s/\"|'$//"
}

main "$@"
