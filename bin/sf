#!/usr/bin/env zsh

declare -r app_name="${0##*/}"

main() (
    config_load_env_files

    declare -r app_runner="$(runner_detect)"
    declare -r app_console="$(console_detect)"

    local cmd="${1}" && shift 2>/dev/null

    case "${cmd}" in
        serve|start)
            app_serve "$@"
            exit $?
            ;;
        stop)
            app_stop "$@"
            exit $?
            ;;
        status)
            app_status "$@"
            exit $?
            ;;
        run)
            run "$@"
            exit $?
            ;;
        php)
            php_run "$@"
            exit $?
            ;;
        composer)
            composer_run "$@"
            exit $?
            ;;
        phpunit)
            phpunit_run "$@"
            exit $?
            ;;
        phive)
            phive_run "$@"
            exit $?
            ;;
        psql)
            psql_run "$@"
            exit $?
            ;;
        open)
            open_browser "$@"
            exit $?
            ;;
        mails)
            open_mails "$@"
            exit $?
            ;;
    esac

    console_run "${cmd}" "$@"
)

app_serve() {
    if runner_is 'docker' || runner_is 'docker-compose'; then
        exec "$(docker_compose_command)" up "$@"
    fi

    if runner_is 'ddev'; then
        exec ddev start "$@"
    fi

    if runner_is 'symfony'; then
        exec symfony serve "$@"
    fi

    local help port=('--port' '8000') root=('--document-root' 'public')

    zmodload zsh/zutil
    zparseopts -D -F -K -- \
        {h,-help}=help \
        -no-ansi=noansi \
        -port:=port \
        -document-root:=root \
        || return 1

    if [[ -n "${help}" ]]; then
        cat <<HELP
Run a local web server

Usage:

  ${app_name} [options]

Options:

  --port=value           Preferred HTTP port [default: ${port[2]}]
  --document-root=value  Project document root [default: ${root[2]}]
  -h, --help             Show this help
HELP
        return 0
    fi

    exec php -S "127.0.0.1:${port[2]/=}" -t "${root[2]/=}"
}

app_stop() {
    if runner_is 'docker' || runner_is 'docker-compose'; then
        exec "$(docker_compose_command)" down "$@"
    fi

    if runner_is 'ddev'; then
        exec ddev stop "$@"
    fi

    if runner_is 'symfony'; then
        exec symfony server:stop "$@"
    fi

    runner_not_supported
}

app_status() {
    echo "Runner: ${app_runner}"
    echo "Console: ${app_console}\n"

    if runner_is 'local'; then
        echo "PHP binary: $(which php)\n"
    fi

    php_run --version

    if runner_is 'ddev'; then
        echo
        ddev status "$@"
        return $?
    fi

    if runner_is 'docker' || runner_is 'docker-compose'; then
        echo
        exec "$(docker_compose_command)" ps "$@"
    fi

    if runner_is 'symfony'; then
        echo "\nSymfony binary: $(which symfony)\n"
        symfony server:status "$@"
        return $?
    fi
}

run() {
    if runner_is 'symfony'; then
        symfony run "$@"
        return $?
    fi

    runner_run "$@"
}

php_run() {
    runner_run php "$@"
}

composer_run() {
    if runner_is 'symfony'; then
        symfony composer "$@"
        return $?
    fi

    runner_run composer "$@"
}

phpunit_run() {
    declare -r phpunit="$(phpunit_find)"

    if [[ -z "${phpunit}" ]]; then
        run phpunit "$@"
        return $?
    fi

    php_run "${phpunit}" "$@"
}

phpunit_find() {
    find_first_existing_file \
        'bin/phpunit' \
        'vendor/bin/phpunit' \
    ;
}

phive_run() {
    declare -r phive="$(phive_find)"

    if [[ -z "${phive}" ]]; then
        run phive "$@"
        return $?
    fi

    php_run "${phive}" "$@"
}

phive_find() {
    declare phive="$(find_first_existing_file \
        'bin/phive' \
        'bin/phive.phar' \
        'phive' \
        'phive.phar' \
    )"

    if [[ -n "${phive}" ]]; then
        echo "${phive}"
        return
    fi

    if runner_is 'symfony'; then
        phive="$(which phive 2>/dev/null)"

        if [[ $? -eq 0 && -f "${phive}" ]]; then
            echo "${phive}"
            return
        fi
    fi

    return 1
}

console_run() {
    if [[ ! -f "${app_console}" ]]; then
        echo "Console not found: ${app_console}" >&2
        return 1
    fi

    if runner_is 'symfony' && [[ "${app_console}" == 'bin/console' ]]; then
        symfony console "$@"
        return $?
    fi

    runner_run php "${app_console}" "$@"
}

console_detect() {
    echo "${SF_CONSOLE:-bin/console}"
}

psql_run() {
    if runner_is 'ddev'; then
        ddev psql "$@"
        return $?
    fi

    if runner_is 'symfony'; then
        symfony run psql "$@"
        return $?
    fi

    runner_not_supported
}

open_browser() {
    if runner_is 'ddev'; then
        ddev launch "$@" 2>/dev/null
        return $?
    fi

    if runner_is 'symfony'; then
        symfony open:local "$@"
        return $?
    fi

    if runner_is 'docker' || runner_is 'docker-compose'; then
        open 'https://localhost' 2>/dev/null
        return $?
    fi

    open 'http://127.0.0.1:8000' 2>/dev/null
}

open_mails() {
    if runner_is 'ddev'; then
        ddev launch -m "$@" 2>/dev/null
        return $?
    fi

    if runner_is 'symfony'; then
        symfony open:local:webmail "$@"
        return $?
    fi

    runner_not_supported
}

symfony_cli_enabled() {
    feature_enabled "${SF_SYMFONY_CLI:-on}"
}

ddev_enabled() {
    feature_enabled "${SF_DDEV:-on}"
}

docker_enabled() {
    feature_enabled "${SF_DOCKER:-on}"
}

docker_find_compose_file() {
    find_first_existing_file \
        "${PWD}/docker-compose.yml" \
        "${PWD}/docker-compose.yaml" \
    ;
}

docker_compose_command() {
    (( $+commands[docker-compose] )) \
        && echo 'docker-compose' \
        || echo 'docker compose'
}

local_enabled() {
    feature_enabled "${SF_LOCAL:-on}"
}

runner_run() {
    if [[ -z "${app_runner}" ]]; then
        echo 'Runner is not configured.' 2>/dev/null
        return 1
    fi

    runner_is 'local' && "$@" || "${(@s: :)app_runner}" "$@"
}

runner_detect() {
    declare runner="${SF_RUNNER}"

    if [[ -n "${runner}" ]]; then
        echo "${runner}"
        return
    fi

    if ddev_enabled && [[ -d "${PWD}/.ddev" ]]; then
        echo 'ddev exec --'
        return
    fi

    if docker_enabled; then
        declare -r compose_file="$(docker_find_compose_file)"

        if [[ -f "${compose_file}" ]]; then
            declare -ra services=(
                $(sed -nE -e 's/^[[:space:]]+(php|app+):.*$/\1/p' <"${compose_file}" 2>/dev/null)
            )

            if [[ -n "${services[1]}" ]]; then
                echo "$(docker_compose_command) exec -- ${services[1]}"
                return
            fi
        fi
    fi

    if symfony_cli_enabled && (( $+commands[symfony] )) then
        echo 'symfony'
        return
    fi

    if local_enabled; then
        echo 'local'
        return
    fi

    return 1
}

runner_is() {
    [[ "$1" == "$(runner_name)" ]]
}

runner_name() {
    echo "${app_runner%% *}"
}

runner_not_supported() {
    echo "Not supported by current runner: ${app_runner}" >&2
    exit 1
}

config_load_env_files() {
    [[ -f "${PWD}/.env" ]] && config_process <"${PWD}/.env"
    [[ -f "${PWD}/.env.local" ]] && config_process <"${PWD}/.env.local"
}

config_process() {
    grep -E '^[[:space:]]*SF_\w+=' | while IFS='=' read -r key value; do
        export "${key}"="$(unquote <<<"${value}")"
    done
}

feature_enabled() {
    [[ ! "${1}" =~ '^(0|no|off|false|disabled?)$' ]]
}

find_first_existing_file() {
    for file in "$@"; do
        if [[ -f "$file" ]]; then
            echo "${file}" && return
        fi
    done

    return 1
}

unquote() {
    sed -Ee "s/^\"|'//" -e "s/\"|'$//"
}

main "$@"
