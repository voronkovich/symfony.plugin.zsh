#!/usr/bin/env zunit

@test 'sf: shows an error if console not found' {
    run sf

    assert $state equals 1
    assert $output contains 'Console not found: bin/console'
}

@test 'sf: uses Symfony CLI if it is installed' {
    cd "${FIXTURES_PATH}/app"

    run sf about

    assert $state equals 0
    assert $output same_as 'symfony: console about'
}

@test 'sf: allows to disable Symfony CLI via SF_SYMFONY_CLI=off' {
    cd "${FIXTURES_PATH}/app"

    export SF_SYMFONY_CLI=on
    run sf list --no-ansi

    assert $state equals 0
    assert $output contains 'symfony: console list --no-ansi'

    export SF_SYMFONY_CLI=off
    run sf list --no-ansi

    assert $state equals 0
    assert $output contains 'php: bin/console list --no-ansi'
}

@test 'sf: allows to disable "local" runner via SF_LOCAL=off' {
    cd "${FIXTURES_PATH}/app"

    export SF_SYMFONY_CLI=off

    export SF_LOCAL=on
    run sf debug:router

    assert $state equals 0
    assert $output same_as 'php: bin/console debug:router'

    export SF_LOCAL=off
    run sf debug:router

    assert $state equals 1
    assert $output same_as 'Runner is not configured.'
}

@test 'sf: runs default console command if no arguments provided' {
    cd "${FIXTURES_PATH}/app"

    export SF_SYMFONY_CLI=off

    run sf

    assert $state equals 0
    assert $output same_as 'php: bin/console '
}

@test 'sf: runs specified console command' {
    cd "${FIXTURES_PATH}/app"

    export SF_SYMFONY_CLI=off

    run sf about

    assert $state equals 0
    assert $output same_as 'php: bin/console about'
}

@test 'sf: allows to set console binary via SF_CONSOLE env' {
    cd "${FIXTURES_PATH}/app-laravel"

    export SF_SYMFONY_CLI=off
    export SF_CONSOLE=artisan

    run sf about

    assert $state equals 0
    assert $output same_as 'php: artisan about'
}

@test 'sf: allows to set runner via SF_RUNNER env' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='docker compose exec -- php'

    run sf debug:router

    assert $state equals 0
    assert $output same_as 'docker: compose exec -- php php bin/console debug:router'
}

@test 'sf: loads configuration from .env and .env.local files' {
    cd "${FIXTURES_PATH}/app-env-file"

    run sf test

    assert $state equals 0
    assert $output same_as 'docker: compose exec -- laravel php artisan test'
}

@test 'sf: runs commands locally if could not detect runner' {
    cd "${FIXTURES_PATH}/app"

    export SF_SYMFONY_CLI=off
    export SF_DDEV=off

    run sf status

    assert $state equals 0
    assert $lines[1] same_as 'Runner: local'

    run sf about

    assert $state equals 0
    assert $output same_as 'php: bin/console about'
}

@test 'sf: detects DDEV automatically' {
    cd "${FIXTURES_PATH}/app-ddev"

    export SF_SYMFONY_CLI=off
    export SF_DDEV=on

    run sf debug:container --show-envs

    assert $state equals 0
    assert $output contains 'ddev: exec -- php bin/console debug:container --show-envs'
}

@test 'sf: Allows to disable DDEV autodetection via SF_DDEV=off' {
    cd "${FIXTURES_PATH}/app-ddev"

    export SF_SYMFONY_CLI=off
    export SF_DDEV=off

    run sf debug:container --show-envs

    assert $state equals 0
    assert $output contains 'php: bin/console debug:container --show-envs'
}

@test 'sf: detects Docker automatically' {
    cd "${FIXTURES_PATH}/app-docker"

    run sf debug:container --show-envs

    assert $state equals 0
    assert $output contains 'docker-compose: exec -- php php bin/console debug:container --show-envs'
}

@test 'sf: Allows to disable Docker autodetection via SF_DOCKER=off' {
    cd "${FIXTURES_PATH}/app-docker"

    export SF_SYMFONY_CLI=off
    export SF_DOCKER=off

    run sf debug:container --show-envs

    assert $state equals 0
    assert $output contains 'php: bin/console debug:container --show-envs'
}

@test 'sf serve: Uses built-in PHP web server when "local" runner is used' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER=local

    run sf serve

    assert $state equals 0
    assert $output same_as 'php: -S 127.0.0.1:8000 -t public'
}

@test 'sf serve: Allows to set port and public directory if "local" runner is used' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER=local

    run sf serve --port=9000 --document-root=web

    assert $state equals 0
    assert $output same_as 'php: -S 127.0.0.1:9000 -t web'
}

@test 'sf serve: Supported by Symfony CLI' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='symfony'

    run sf serve -d

    assert $state equals 0
    assert $output same_as 'symfony: serve -d'
}

@test 'sf serve: Supported by Docker' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='docker compose exec -- symfony'

    run sf serve -d

    assert $state equals 0
    assert $output same_as 'docker-compose: up -d'
}

@test 'sf serve: Supported by DDEV' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='ddev exec --'

    run sf serve

    assert $state equals 0
    assert $output same_as 'ddev: start'
}

@test 'sf serve: Not supported for unknown runners' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER=bash

    run sf serve

    assert $state equals 1
    assert $output same_as 'Not supported by current runner: bash'
}

@test 'sf stop: Supported by Symfony CLI' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='symfony'

    run sf stop

    assert $state equals 0
    assert $output same_as 'symfony: server:stop'
}

@test 'sf stop: Supported by Docker' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='docker compose exec -- symfony'

    run sf stop

    assert $state equals 0
    assert $output same_as 'docker-compose: down'
}

@test 'sf stop: Supported by DDEV' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='ddev exec --'

    run sf stop

    assert $state equals 0
    assert $output same_as 'ddev: stop'
}

@test 'sf stop: Not supported by "local" runner' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER=local

    run sf stop

    assert $state equals 1
    assert $output same_as 'Not supported by current runner: local'
}

@test 'sf stop: Not supported for unknown runners' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER=bash

    run sf stop

    assert $state equals 1
    assert $output same_as 'Not supported by current runner: bash'
}

@test 'sf status: Shows current runner' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER=local
    run sf status

    assert $state equals 0
    assert "${lines[1]}" same_as 'Runner: local'

    export SF_RUNNER=symfony
    run sf status

    assert $state equals 0
    assert "${lines[1]}" same_as 'Runner: symfony'
}

@test 'sf status: Shows current console' {
    cd "${FIXTURES_PATH}/app"

    export SF_CONSOLE=bin/console
    run sf status

    assert $state equals 0
    assert "${lines[2]}" same_as 'Console: bin/console'

    export SF_CONSOLE=artisan
    run sf status

    assert $state equals 0
    assert "${lines[2]}" same_as 'Console: artisan'
}

@test 'sf status: Shows PHP version' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER=local

    run sf status

    assert $state equals 0
    assert "${lines[4]}" same_as 'php: --version'
}

@test 'sf status: Shows PHP binary path for "local" runner' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER=local

    run sf status

    assert $state equals 0
    assert "${lines[6]}" same_as "PHP binary: ${FIXTURES_PATH}/stubs/php"
}

@test 'sf status: Shows Symfony CLI binary path and server status if Symfony CLI used' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER=symfony

    run sf status

    assert $state equals 0
    assert "${lines[6]}" same_as "Symfony binary: ${FIXTURES_PATH}/stubs/symfony"
    assert "${lines[8]}" same_as 'symfony: server:status'
}

@test 'sf status: Shows services status for Docker' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='docker compose exec -- symfony'

    run sf status

    assert $state equals 0
    assert "${lines[6]}" same_as 'docker-compose: ps'
}

@test 'sf status: Shows services status for DDEV' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='ddev exec --'

    run sf status

    assert $state equals 0
    assert "${lines[6]}" same_as 'ddev: status'
}


@test 'sf mails: Supported by Symfony CLI' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER=symfony

    run sf mails

    assert $state equals 0
    assert $output same_as 'symfony: open:local:webmail'
}

@test 'sf mails: Supported by DDEV' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER=ddev

    run sf mails

    assert $state equals 0
    assert $output same_as 'ddev: launch -m'
}

@test 'sf mails: Not supported by "local" runner' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER=local

    run sf mails

    assert $state equals 1
    assert $output same_as 'Not supported by current runner: local'
}

@test 'sf mails: Not supported by Docker' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='docker compose exec -- symfony'

    run sf mails

    assert $state equals 1
    assert $output same_as 'Not supported by current runner: docker compose exec -- symfony'
}

@test 'sf stop: Not supported for unknown runners' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='zsh -c'

    run sf mails

    assert $state equals 1
    assert $output same_as 'Not supported by current runner: zsh -c'
}

@test 'sf psql: Runs locally installed psql by default' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER=local

    run sf psql

    assert $state equals 0
    assert $output same_as 'psql: '
}

@test 'sf psql: Supported by Symfony CLI only if docker-compose file presents' {
    cd "${FIXTURES_PATH}/app-docker"

    export SF_RUNNER=symfony

    run sf psql

    assert $state equals 0
    assert $output same_as 'symfony: run psql'
}

@test 'sf psql: Supported by DDEV' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER=ddev

    run sf psql

    assert $state equals 0
    assert $output same_as 'ddev: psql'
}

@test 'sf run: Runs comnnand using configured runner' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='zsh -c'

    run sf run 'echo "Hello, World!"'

    assert $state equals 0
    assert $output same_as 'Hello, World!'
}

@test 'sf run: Runs comnnand locally if "local" runner is used' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='local'

    run sf run php -v

    assert $state equals 0
    assert $output same_as 'php: -v'
}

@test 'sf run: Uses "symfony run" comnnand if Symfony CLI used' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='symfony'

    run sf run yarn

    assert $state equals 0
    assert $output same_as 'symfony: run yarn'
}

@test 'sf php: Runs PHP using configured runner' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='local'
    run sf php index.php

    assert $state equals 0
    assert $output same_as 'php: index.php'

    export SF_RUNNER='symfony'
    run sf php index.php

    assert $state equals 0
    assert $output same_as 'symfony: php index.php'

    export SF_RUNNER='ddev exec --'
    run sf php index.php

    assert $state equals 0
    assert $output same_as 'ddev: exec -- php index.php'

    export SF_RUNNER='docker compose exec -- php'
    run sf php index.php

    assert $state equals 0
    assert $output same_as 'docker: compose exec -- php php index.php'
}

@test 'sf composer: Runs composer using configured runner' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='local'
    run sf composer req orm

    assert $state equals 0
    assert $output same_as 'composer: req orm'

    export SF_RUNNER='symfony'
    run symfony composer req orm

    assert $state equals 0
    assert $output same_as 'symfony: composer req orm'

    export SF_RUNNER='ddev exec --'
    run sf composer req orm

    assert $state equals 0
    assert $output same_as 'ddev: exec -- composer req orm'

    export SF_RUNNER='docker compose exec -- php'
    run sf composer req orm

    assert $state equals 0
    assert $output same_as 'docker: compose exec -- php composer req orm'
}

@test 'sf phpunit: Runs locally installed phpunit using configured runner' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='local'
    run sf phpunit tests/FooTest.php

    assert $state equals 0
    assert $output same_as 'php: bin/phpunit tests/FooTest.php'

    export SF_RUNNER='symfony'
    run sf phpunit tests/FooTest.php

    assert $state equals 0
    assert $output same_as 'symfony: php bin/phpunit tests/FooTest.php'

    export SF_RUNNER='ddev exec --'
    run sf phpunit tests/FooTest.php

    assert $state equals 0
    assert $output same_as 'ddev: exec -- php bin/phpunit tests/FooTest.php'

    export SF_RUNNER='docker compose exec -- php'
    run sf phpunit tests/FooTest.php

    assert $state equals 0
    assert $output same_as 'docker: compose exec -- php php bin/phpunit tests/FooTest.php'
}

@test 'sf phpunit: Runs globally installed phpunit if local binary not found' {
    cd "${FIXTURES_PATH}/app-laravel"

    export SF_RUNNER='local'
    run sf phpunit tests/FooTest.php

    assert $state equals 0
    assert $output same_as 'phpunit: tests/FooTest.php'

    export SF_RUNNER='symfony'
    run sf phpunit tests/FooTest.php

    assert $state equals 0
    assert $output same_as "symfony: php ${FIXTURES_PATH}/stubs/phpunit tests/FooTest.php"

    export SF_RUNNER='ddev exec --'
    run sf phpunit tests/FooTest.php

    assert $state equals 0
    assert $output same_as 'ddev: exec -- phpunit tests/FooTest.php'

    export SF_RUNNER='docker compose exec -- php'
    run sf phpunit tests/FooTest.php

    assert $state equals 0
    assert $output same_as 'docker: compose exec -- php phpunit tests/FooTest.php'
}

@test 'sf phive: Runs locally installed phive using configured runner' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='local'
    run sf phive install

    assert $state equals 0
    assert $output same_as 'php: phive.phar install'

    export SF_RUNNER='symfony'
    run sf phive install

    assert $state equals 0
    assert $output same_as 'symfony: php phive.phar install'

    export SF_RUNNER='ddev exec --'
    run sf phive install

    assert $state equals 0
    assert $output same_as 'ddev: exec -- php phive.phar install'

    export SF_RUNNER='docker compose exec -- php'
    run sf phive install

    assert $state equals 0
    assert $output same_as 'docker: compose exec -- php php phive.phar install'
}

@test 'sf phive: Runs globally installed phive if local binary not found' {
    cd "${FIXTURES_PATH}/app-laravel"

    export SF_RUNNER='local'
    run sf phive install

    assert $state equals 0
    assert $output same_as 'phive: install'

    export SF_RUNNER='symfony'
    run sf phive install

    assert $state equals 0
    assert $output same_as "symfony: php ${FIXTURES_PATH}/stubs/phive install"

    export SF_RUNNER='ddev exec --'
    run sf phive install

    assert $state equals 0
    assert $output same_as 'ddev: exec -- phive install'

    export SF_RUNNER='docker compose exec -- php'
    run sf phive install

    assert $state equals 0
    assert $output same_as 'docker: compose exec -- php phive install'
}

@test 'sf open: Allows to set url via SF_OPEN_URL env' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='local'
    export SF_OPEN_URL='https://app.dev'

    run sf open /admin

    assert $state equals 0
    assert $output same_as 'open: https://app.dev/admin'

    export SF_RUNNER='docker compose exec -- php'

    run sf open /admin

    assert $state equals 0
    assert $output same_as 'open: https://app.dev/admin'
}

@test 'sf open: Supported by Symfony CLI' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='symfony'
    export SF_OPEN_URL='https://app.dev'

    run sf open /admin

    assert $state equals 0
    assert $output same_as 'symfony: open:local --path=/admin'
}

@test 'sf open: Supported by DDEV' {
    cd "${FIXTURES_PATH}/app-ddev"

    run sf open /admin

    assert $state equals 0
    assert $output same_as 'ddev: launch /admin'
}

@setup {
    path=("${PWD}/bin" "${PWD}/tests/_fixtures/stubs" $path)
    FIXTURES_PATH="${PWD}/tests/_fixtures"
    unset SF_RUNNER
    unset SF_SYMFONY_CLI
    unset SF_DDEV
    unset SF_CONSOLE
}
