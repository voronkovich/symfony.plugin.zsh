#!/usr/bin/env zunit

@test 'sf: shows an error if console not found' {
    run sf

    assert $state equals 1
    assert $output contains 'Console not found: bin/console'
}

@test 'sf: runs default console command if no arguments provided' {
    export SF_SYMFONY=0

    cd "${FIXTURES_PATH}/app"

    run sf

    assert $state equals 0
    assert $output same_as 'php: bin/console '
}

@test 'sf: runs specified console command' {
    export SF_SYMFONY=0

    cd "${FIXTURES_PATH}/app"

    run sf about

    assert $state equals 0
    assert $output same_as 'php: bin/console about'
}

@test 'sf: use Symfony CLI if it is installed' {
    cd "${FIXTURES_PATH}/app"

    run sf about

    assert $state equals 0
    assert $output same_as 'symfony: console about'
}

@test 'sf: allows to set console binary via SF_CONSOLE env' {
    export SF_SYMFONY=0
    export SF_CONSOLE=artisan

    cd "${FIXTURES_PATH}/app-laravel"

    run sf about

    assert $state equals 0
    assert $output same_as 'php: artisan about'
}

@test 'sf: allows to set "runner" via SF_RUNNER env' {
    cd "${FIXTURES_PATH}/app"

    export SF_RUNNER='docker compose exec php'

    run sf debug:router

    assert $state equals 0
    assert $output same_as 'docker: compose exec php php bin/console debug:router'
}

@test 'sf: allows to set "runner" via .env.local file' {
    cd "${FIXTURES_PATH}/app-env-local"

    run sf debug:container

    assert $state equals 0
    assert $output same_as 'docker: compose exec php php bin/console debug:container'
}

@test 'sf: detects DDEV "runner" if SF_DDEV env enabled' {
    cd "${FIXTURES_PATH}/app-ddev"

    export SF_DDEV='1'

    run sf debug:container --show-envs

    assert $state equals 0
    assert $output contains 'ddev: exec -- php bin/console debug:container --show-envs'
}

@setup {
    path=("${PWD}/bin" "${PWD}/tests/_fixtures/stubs" $path)
    FIXTURES_PATH="${PWD}/tests/_fixtures"
    unset SF_RUNNER
    unset SF_DDEV
    unset SF_SYMFONY
    unset SF_CONSOLE
}
